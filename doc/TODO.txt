Now:
====
- enable to turn off lyrics and produce a book with lyrics and a book without.
- enable the runner of the build to decide whether \myEndLine will be
	a real break or not. This could reduce the size of the book by
	a lot.
- fix the db import script. turn it into python and use the mako system.
- modify the import script to import the book too
	(in all of its formats: lilypond, postscript, pdf).
- reimport everything to my site.
	put a special place on my site for the entire book.
- unite the two python wrapper scripts, they are almost the same.
- fix tunes:
	one note samba.
	what a wonderful world.
	hellelujah I love him so.
	My little suede shoes.
	Round midnight.
	Corcovado.
- add a license on the first page (select a good license? Creative Commons?)
- In most cases where there is a \repate volta (lots of tunes!!!) I remark the first alternatives \myEndLine to save
	lines. Should we have a more general mechanism for this?

book stuff:
- logo for the project.
- add a nice front page to the book with the name of the project, logo, links etc.

- try to add index by performer, composer, poet, structure, and more.
- get to a good book.
	only publish good tunes.
	put it up on my website.
- do warnings catching in lilypond wrapper.
- do stats about lilypond performance with big files...
	produce a graph.
	send it to the lilypond bugs mailing list.
- I'm not doing inlining in the ly files. This means that the chords, tune
	and other big parts are repeated in the individual ly files more than once.
	I once did it and removed it as part of the effort to build the book.
	Need to bring it back...
	This will keep the size of the .ly files down and will make them more
	editable by hand.
- find out how to give names to various snipplets of notes and thus write less.
	This is related to the previous TODO item.
	This was done in two of the tunes but I removed it because of technical
	difficulties in producing the final book.
	document it in the lilypond hints doc.
- make the footer that I have point to an openbook web page that I need to open.
	Copy the ideas from the mutopia footer.
	Open the webpage at veltzer.org/openbook
	do make install to install the webpage.

parts in the song:
==================
In hebrew I want it to read "helek alef" "ptiha" etc.. In English A, B, Intro...
Make a set of macros and use them.

licensing:
==========
embed a licence in all of the tunes.
Also do it in the Makefile, in the scripts and all.
Add a test which shows which files are without license to check_all.
	
visuals
=======
- make more tunes fit on one page (reduce sizes of staffs, space between staff and more).
- make the size of the copyright smaller so that I could fit the entire copyright.

youtube links:
==============
support more than one youtube link (there are already a few tunes with more than one youtube link in them).

mako:
=====
- do dependency analysis on it.
- look at some of the lilypond outputs and see that some %% in the source produce just one (%) in the
output. What is that? Take care of it...

config system:
==============
The system will allow users to config which type of tune they want to produce.
They could select:
- scale (C for concert, Bb, Eb for horns etc).
- do they want lyrics ?
- font sizes from several configurations and more.
- do they want to produce midi, postscript, pdf, mp3, ogg.
- what tunes do they want to build.

epdfs:
======
- bring more epdfs for the tunes that I already have.
	document how to find those epdfs.
- bring the meta data from the epdfs into the database and show them.
	Where do they come from ? (which real book?).
	What page ?
- support not just the pdf format but other formats as well.

db importing:
=============
- import only things which are not in the database.
- import in the order of the tune names.
- import my own recordings into the database - look at the tags for more data.
- in the database hold style as foreign keys.
- in the database hold poet as foreign keys.
- in the database hold composer as foreign keys.
- import stuff which is not finished too and add completion column.
- add a php code that does statistics on it to display in the blog.

parsing lilypond:
=================
- there is much to do in this area but no known issues at this time.

build system
============
- the making of the book (final book) is run without a lilypond wrapper and as a result
	I do not catch warnings off of it. make it so.
- when building all the products from .ly files (pdf,midi,ps,png) make sure
	to remove ALL products from that .ly files. This is especially true for
	pngs since if a piece shrikns in side the number of the png produced from it
	goes DOWN and so there is a chance of old png hanging around.
- add support for deriving gpp dependencies (a simple perl script).
	use it to generate dependencies and analyze them.
- do a general cache (~/.make_cache) script which will run commands for me and will save
results according to the command line and md5 sum of the source and deps.
this way changes to the makefile will not do a full recompile.
- make each lily file stand on it's own so that people could use it.
	This means stopping using the lilypond include feature and starting
	to use some kind of marcro processor (with dependency analysis ofcourse).
- make each build make a temp folder so that I could build at the same time.
- add flac support.
- add my own recording of the tune in wav, mp3, flac and ogg for download.
- add "topic" to each piece. Topics at first should be reflections of the directory
	the piece is in. Add it to the database.
- make sure the build system checks that each file has the right tags at the header
	in the right order (whats the best way to do this ?!?).
- create compressed postscripts and not regular ones (postscript is not a compressed format).
- make a book with all of the standards.
	- how do I include all the files ? Should I write a script ?!?
- make the build system produce a .gitignore file (make the .gitignore file be a target
	of the build system dependent on everything including the makefile itself).
- add an option to find lyi files which are not used (not included anywhere).

outof lilypond lyrics support:
==============================
- add lyrics to the system.
- store the lyrics inside the lilypond file so that there will be only one source file.
- extract the lyrics somehow and turn it into a blob.
- store the blob in the database and allow to download and view it.
- syntax check the lyrics.

wav support (this is currently disabled):
=========================================
- reduce the size of the wav files (why are some of them so big ?!?).
	this causes their import to be aborted (this is why it is currently disabled).

mp3 support:
============
- there are no tags in the mp3 files. Add them.

ogg support:
============
- there are no tags in the ogg files. Add them.

midi support:
=============
- wikipedia have a way of playing midi directly from the wiki pages.
	find out how. Do that from my page too.

Lilypond cheet sheet
====================
- create a standards/lead sheet cheet sheet for lilypond.
  cheet sheet should show:
	- complex chords (7.5-)
	- chords with alternate bases.
	- matching lyrics to melody.
		many words per one note
		splitting a word
	- the thing to type at \chords in order that chords will re-appear if when
		they are not changed.
	- changing the speed of the tune
	- all the rest on the stuff I have in hints.txt.
	* once the cheet sheet it done I can get ridd of the hints.txt file.


Info addition
=============
- add "poet="poetname"" header in all the pieces.
- add "copyright" header in all the pieces.
- add "todo" in all the pieces in the same style.
- add "completion level" in all the pieces. define completion levels and mark them out.
	put them in the database.
	show them on the php.
- add "tags" header in all the pieces (jazz, swing, bossa etc...).
- make all of tunes have the same high level structure as "a_foggy_day.ly". This is much
	better because:
	- You don't have to have a stupid strucutre at the end which is replicated for each
	tune (or included).
	- Stuff gets in the sheet or out of it (tune, harmony, lyrics) according to whether
	it is there. When you add or remove stuff you just add or remove it - no need to update
	the master structure context.
	Record all of these understandings in some kind of standards document that I will
	start for all of this material.
- get number of pages and import that into the database too.
	How do we get it ?!?
	- count the number of pages in the pdf (some kind of pdf parser ?!?).
	- count the number of images created when --png is used.

Database additions
==================
- get last changed date (the data of the *.ly file ?!?) and put it in the database
	on import. Show it in on the web.
	Enable a direct link to a files history from git from the web.
- add links to my favourite performances of the tune.
- assume many jpegs and many midis per compilation. Store them all in the database.
- make all the blobs reside in a blob table and make get blob really simple by getting
	from that table either by uuid or by id.

book generation tweaks:
=======================
- make the copyright and tagline be at the bottom of each last page of every tune instead of directly after.
- have the table of content contain the names of the composers/poets too.
- add a last page.
- add the ability to have page numbers on ALL pages. by default lilypond only puts page numbers on even numbered
	pages.
- add much more information on the first page:
	ip of the computer doing the build.
	checksum of the input.
	links to the openbook website and to openbook on github and to my own blog,
		and to the lilypond website.
		and to my email.
	version of the operating system used to build the book.
	number of commits in git.
- consider moving the format of the copyright to the way it is done in the fakebook:
	the copyright is on the left in small print, the poet and composer are on the right
	in bigger print.
- in the books table of content there are problems when the name(s) of the poets are also
	the name(s) of the composers. Take a look at "What A Wonderful World" to see an example.
	Fix this. The best way would be to gather names of composers and poets, unique them,
	then put the composers first. This would require a bit of python code to fix.

checking of tunes:
==================
- look for \endSong and then a newline between it and \endChords.
	This needs to be done via an improvement of pgrep.pl since pgrep cannot
	scan for patterns that span more than one line.
- cat * | grep uuid | sort  | uniq | wc -l
	is used to check that each tune has a unique uuid. do it this way or some other
	way but check this as part of check_all also.
- make the checks be part of the build and make the build fail if some of the checks fail.
